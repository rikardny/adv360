#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

#define FSLASH  LS(N7)
#define RPIPE   RA(NON_US_BACKSLASH)
#define BSLASH  RA(MINUS)
#define LESSTH  NON_US_BACKSLASH
#define LBRACK  RA(N8)
#define LBRACE  RA(N7)
#define LPAREN  ASTERISK
#define AMPERS  CARET
#define EQUALS  RPAR
#define RPAREN  LPAR
#define RBRACK  RA(N0)
#define RBRACE  RA(N9)
#define GRTHAN  LS(NON_US_BSLH)
#define RTILDE  RA(RBKT)
#define AO      LEFT_BRACKET
#define AE      SQT
#define OE      SEMICOLON
#define AT      RA(N2)
#define DOLLAR  RA(N4)

/ {
    behaviors {
        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70>;
            hold-trigger-on-release;
        };

        hl: hl {
            compatible = "zmk,behavior-hold-tap";
            label = "HL";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 67 68 69 70 71 72 73 74 75 35 36 52 65 66 67>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp N0      &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &none                                                       &none       &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &none
&kp TAB     &kp Q       &kp W       &kp F       &kp P       &kp B       &none                                                       &none       &kp J       &kp L       &kp U       &kp Y       &kp MINUS   &kp RBKT
&hl LGUI ESC &hl LGUI A &hl LALT R  &hl LSHFT S &hl LCTRL T &kp G       &none       &none       &none       &none       &none       &none       &kp M       &hr RCTRL N &hr RSHFT E &hr LALT I  &hr RGUI O  &hr RGUI NUHS
&kp LC(B)   &kp Z       &kp X       &kp C       &kp D       &kp V                               &none       &none                               &kp K       &kp H       &kp COMMA   &kp PERIOD  &kp FSLH    &kp RC(W)
&kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)              &lt 1 BSPC  &kp SPACE   &kp BSPC    &kp DELETE  &kp RET     &lt 2 DELETE            &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)
            >;
        };

        lower_layer {
            bindings = <
&trans      &trans      &trans      &trans      &trans      &trans      &bootloader                                                 &trans      &trans      &trans      &trans      &trans      &trans      &trans
&kp N0      &kp N1      &kp N2      &kp N3      &kp N4      &kp N5      &bl BL_INC                                                  &trans      &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kp RTILDE
&trans      &kp LESSTH  &kp LBRACK  &kp LBRACE  &kp LPAREN  &kp AMPERS  &bl BL_DEC  &trans      &trans      &trans      &trans      &trans      &kp EQUALS  &kp RPAREN  &kp RBRACK  &kp RBRACE  &kp GRTHAN  &kp LS(N2)
&trans      &kp FSLASH  &kp RPIPE   &kp BSLASH  &kp AT      &kp DOLLAR                          &trans      &trans                              &trans      &trans      &trans      &trans      &trans      &trans
&trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans
            >;
        };

        raise_layer {
            bindings = <
&trans      &trans      &trans      &trans      &trans      &trans      &trans                                                      &bootloader &trans      &trans      &trans      &trans      &trans      &trans
&trans      &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp PSCRN   &trans      &trans                                                      &bl BL_INC  &kp DOWN    &kp RIGHT   &kp AO      &kp AE      &kp OE      &trans
&trans      &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &kp LG(N5)  &trans      &trans      &trans      &trans      &trans      &bl BL_DEC  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &kp LG(N0)  &trans
&trans      &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &trans     &trans                              &trans      &trans                              &kp UP      &kp LEFT    &trans      &trans      &trans      &trans
&trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans
            >;
        };

        tri_layer {
            bindings = <
&trans      &trans      &trans      &trans      &trans      &trans      &trans                                                      &trans      &trans      &trans      &trans      &trans      &trans      &trans
&kp F12     &kp F1      &kp F2      &kp F3      &kp F4      &kp F5      &trans                                                      &trans      &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11
&trans      &kp LS(LG(N1)) &kp LS(LG(N2)) &kp LS(LG(N3)) &kp LS(LG(N4)) &kp LS(LG(N5))   &trans      &trans      &trans      &trans      &trans      &bl BL_DEC  &kp LS(LG(N6)) &kp LS(LG(N7)) &kp LS(LG(N8)) &kp LS(LG(N9)) &kp LS(LG(N0))  &trans
&bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                    &trans      &trans                              &trans      &trans      &trans      &trans      &trans      &trans
&trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans      &trans                  &trans      &trans      &trans      &trans      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
